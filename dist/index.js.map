{"version":3,"sources":["../src/index.js"],"names":["commandListener","notify","level","message","inkdrop","notifications","dismissable","checkForUpdates","force","stdout","packages","getIpmPath","input","data","JSON","parse","split","length","pluginSuffix","err","console","error","activate","commands","add","document","body","isMainWindow","deactivate","dispose"],"mappings":";;;;;;;;AAAA;;;;AAEA,IAAIA,eAAe,GAAG,IAAtB;;AAEA,SAASC,MAAT,CAAgBC,KAAhB,EAAuBC,OAAvB,EAAgC;AAC9BC,EAAAA,OAAO,CAACC,aAAR,CAAuB,MAAKH,KAAM,EAAlC,EAAqCC,OAArC,EAA8C;AAAEG,IAAAA,WAAW,EAAE;AAAf,GAA9C;AACD;;AAED,eAAeC,eAAf,CAA+BC,KAA/B,EAAsC;AACpC,MAAI;AACF,UAAM;AAAEC,MAAAA;AAAF,QAAa,MAAM,oBACvBL,OAAO,CAACM,QAAR,CAAiBC,UAAjB,EADuB,EAEvB,CAAC,QAAD,EAAW,QAAX,CAFuB,EAGvB;AAAEC,MAAAA,KAAK,EAAE;AAAT,KAHuB,CAAzB;AAMA,UAAMC,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWN,MAAM,CAACO,KAAP,CAAa,IAAb,EAAmB,CAAnB,CAAX,CAAb;;AAEA,QAAIH,IAAI,CAACI,MAAL,KAAgB,CAApB,EAAuB;AACrB,UAAIT,KAAJ,EAAW;AACTP,QAAAA,MAAM,CAAC,SAAD,EAAY,6BAAZ,CAAN;AACD;;AAED;AACD;;AAED,UAAMiB,YAAY,GAAGL,IAAI,CAACI,MAAL,GAAc,CAAd,GAAkB,GAAlB,GAAwB,EAA7C;AACA,UAAMd,OAAO,GAAI,4CAA2CU,IAAI,CAACI,MAAO,mBAAkBC,YAAa,GAAvG;AACAjB,IAAAA,MAAM,CAAC,MAAD,EAASE,OAAT,CAAN;AACD,GApBD,CAoBE,OAAOgB,GAAP,EAAY;AACZC,IAAAA,OAAO,CAACC,KAAR,CAAc,oCAAd,EAAoDF,GAApD;;AAEA,QAAIX,KAAJ,EAAW;AACTP,MAAAA,MAAM,CAAC,OAAD,EAAW,uCAAsCkB,GAAG,CAAChB,OAAQ,EAA7D,CAAN;AACD;AACF;AACF;;AAEM,SAASmB,QAAT,GAAoB;AACzBtB,EAAAA,eAAe,GAAGI,OAAO,CAACmB,QAAR,CAAiBC,GAAjB,CAAqBC,QAAQ,CAACC,IAA9B,EAAoC;AACpD,4BAAwB,MAAMnB,eAAe,CAAC,IAAD;AADO,GAApC,CAAlB;;AAIA,MAAIH,OAAO,CAACuB,YAAZ,EAA0B;AACxBpB,IAAAA,eAAe,CAAC,KAAD,CAAf;AACD;AACF;;AAEM,SAASqB,UAAT,GAAsB;AAC3B,MAAI5B,eAAe,KAAK,IAAxB,EAA8B;AAC5BA,IAAAA,eAAe,CAAC6B,OAAhB;AACA7B,IAAAA,eAAe,GAAG,IAAlB;AACD;AACF","sourcesContent":["import execa from 'execa';\n\nlet commandListener = null;\n\nfunction notify(level, message) {\n  inkdrop.notifications[`add${level}`](message, { dismissable: true });\n}\n\nasync function checkForUpdates(force) {\n  try {\n    const { stdout } = await execa(\n      inkdrop.packages.getIpmPath(),\n      ['update', '--json'],\n      { input: 'no' },\n    );\n\n    const data = JSON.parse(stdout.split('\\n')[0]);\n\n    if (data.length === 0) {\n      if (force) {\n        notify('Success', 'All plugins are up-to-date.');\n      }\n\n      return;\n    }\n\n    const pluginSuffix = data.length > 1 ? 's' : '';\n    const message = `Run 'ipm update' in a terminal to update ${data.length} outdated plugin${pluginSuffix}.`;\n    notify('Info', message);\n  } catch (err) {\n    console.error('Could not check for plugin updates', err);\n\n    if (force) {\n      notify('Error', `Could not check for plugin updates: ${err.message}`);\n    }\n  }\n}\n\nexport function activate() {\n  commandListener = inkdrop.commands.add(document.body, {\n    'update-checker:check': () => checkForUpdates(true),\n  });\n\n  if (inkdrop.isMainWindow) {\n    checkForUpdates(false);\n  }\n}\n\nexport function deactivate() {\n  if (commandListener !== null) {\n    commandListener.dispose();\n    commandListener = null;\n  }\n}\n"],"file":"index.js"}